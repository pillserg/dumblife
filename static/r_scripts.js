// Generated by CoffeeScript 1.7.1
(function() {
  var Cell, SPEED_FACTOR, Universe, create_empty_world, create_random_world, div, table, td, tr, _ref;

  _ref = React.DOM, div = _ref.div, table = _ref.table, tr = _ref.tr, td = _ref.td;

  SPEED_FACTOR = 1000;

  create_empty_world = function(width, height) {
    var c, r, row, _i, _len, _ref1, _results;
    _ref1 = (function() {
      var _j, _results1;
      _results1 = [];
      for (row = _j = 0; 0 <= height ? _j <= height : _j >= height; row = 0 <= height ? ++_j : --_j) {
        _results1.push(row);
      }
      return _results1;
    })();
    _results = [];
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      r = _ref1[_i];
      _results.push((function() {
        var _j, _results1;
        _results1 = [];
        for (c = _j = 0; 0 <= width ? _j <= width : _j >= width; c = 0 <= width ? ++_j : --_j) {
          _results1.push({
            is_alive: false
          });
        }
        return _results1;
      })());
    }
    return _results;
  };

  create_random_world = function(width, height) {
    var c, r, row, _i, _len, _ref1, _results;
    _ref1 = (function() {
      var _j, _results1;
      _results1 = [];
      for (row = _j = 0; 0 <= height ? _j <= height : _j >= height; row = 0 <= height ? ++_j : --_j) {
        _results1.push(row);
      }
      return _results1;
    })();
    _results = [];
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      r = _ref1[_i];
      _results.push((function() {
        var _j, _results1;
        _results1 = [];
        for (c = _j = 0; 0 <= width ? _j <= width : _j >= width; c = 0 <= width ? ++_j : --_j) {
          _results1.push({
            is_alive: Boolean(Math.round(Math.random() - 0.2))
          });
        }
        return _results1;
      })());
    }
    return _results;
  };

  Cell = React.createClass({
    render: function() {
      return td({
        className: React.addons.classSet({
          "cell": true,
          "active": this.props.is_alive
        }),
        onClick: (function(_this) {
          return function() {
            return _this.props.handleClick(_this.props);
          };
        })(this)
      });
    }
  });

  Universe = React.createClass({
    get_adjanced_cells_coords: function(x, y, width, height) {
      var ids;
      ids = [];
      lazyProduct([[x + 1, x - 1, x], [y + 1, y - 1, y]], function(_x, _y) {
        if (!((_x === x && _y === y) || _x < 0 || _y < 0 || _y >= width || _x >= height)) {
          return ids.push([_x, _y]);
        }
      });
      return ids;
    },
    decide_fate: function(cell, row_num, cell_num) {
      var alive_adjanced_cells, coords, x, y, _ref1;
      coords = this.get_adjanced_cells_coords(row_num, cell_num, this.state.width, this.state.height);
      alive_adjanced_cells = ((function() {
        var _i, _len, _ref1, _results;
        _results = [];
        for (_i = 0, _len = coords.length; _i < _len; _i++) {
          _ref1 = coords[_i], x = _ref1[0], y = _ref1[1];
          if (this.state.world[x][y].is_alive) {
            _results.push(this.state.world[x][y]);
          }
        }
        return _results;
      }).call(this)) || [];
      if (!cell.is_alive && alive_adjanced_cells.length === 3) {
        return true;
      } else if (cell.is_alive && (2 <= (_ref1 = alive_adjanced_cells.length) && _ref1 <= 3)) {
        return true;
      } else {
        return false;
      }
    },
    evolve_world: function() {
      var new_world, row, row_num, _i, _len, _ref1;
      console.log('evolving');
      new_world = [];
      _ref1 = this.state.world;
      for (row_num = _i = 0, _len = _ref1.length; _i < _len; row_num = ++_i) {
        row = _ref1[row_num];
        new_world.push(row.map((function(_this) {
          return function(cell, cell_num) {
            return {
              is_alive: _this.decide_fate(cell, row_num, cell_num)
            };
          };
        })(this)));
      }
      return this.setState({
        world: new_world
      });
    },
    getInitialState: function() {
      return {
        world: create_random_world(5, 5),
        width: 5,
        height: 5
      };
    },
    componentWillMount: function() {
      $('#start').click((function(_this) {
        return function() {
          window.speed_timeout = setInterval(_this.evolve_world, SPEED_FACTOR / $('#speed').val());
          $('#speed').attr("disabled", "disabled");
          return $('#start').attr("disabled", "disabled");
        };
      })(this));
      $('#stop').click((function(_this) {
        return function() {
          clearTimeout(window.speed_timeout);
          $('#speed').attr("disabled", false);
          return $('#start').attr("disabled", false);
        };
      })(this));
      $('#clear').click((function(_this) {
        return function() {
          return _this.setState({
            world: create_empty_world(_this.state.width, _this.state.height)
          });
        };
      })(this));
      $('#random').click((function(_this) {
        return function() {
          return _this.setState({
            world: create_random_world(_this.state.width, _this.state.height)
          });
        };
      })(this));
      return $('#rerender').click((function(_this) {
        return function() {
          var height, width;
          clearTimeout(window.speed_timeout);
          width = parseInt($('#world_width').val());
          height = parseInt($('#world_height').val());
          return _this.setState({
            world: create_random_world(width, height),
            width: width,
            height: height
          });
        };
      })(this));
    },
    handleCellClick: function(cell_props) {
      var cell_num, is_alive, new_world, row_num;
      is_alive = cell_props.is_alive, row_num = cell_props.row_num, cell_num = cell_props.cell_num;
      new_world = this.state.world.slice(0);
      new_world[row_num][cell_num].is_alive = !new_world[row_num][cell_num].is_alive;
      return this.setState({
        world: new_world
      });
    },
    render: function() {
      return table({
        componentName: "Universe",
        className: "center",
        id: "world"
      }, this.state.world.map((function(_this) {
        return function(row, row_num) {
          return tr({
            key: row_num
          }, row.map(function(cell, cell_num) {
            return Cell({
              is_alive: cell.is_alive,
              row_num: row_num,
              cell_num: cell_num,
              key: "" + row_num + "_" + cell_num,
              handleClick: _this.handleCellClick
            });
          }));
        };
      })(this)));
    }
  });

  React.renderComponent(Universe(), document.getElementById('universe'));

}).call(this);
